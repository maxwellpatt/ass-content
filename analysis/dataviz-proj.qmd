---
Title: "Data Viz Work"
Author: "Maxwell Patterson"
Date: 2024-02-15
---

```{r, message=FALSE}
# Clear environment for sanity
rm(list=ls())
# Install some libraries 
library(here)
library(janitor)
library(tidyverse)
library(dplyr)
library(ggridges)
library(png)
library(grid)
library(imager)
library(jpeg)
library(ggimage)
library(showtext)
library(extrafont)
library(fmsb)
library(radarchart)
library(plotly)
library(cluster)
library(reshape2)
```

```{r}
# Defining color palette
team_colors <- c("Winterfell" = "black", "Slytherin" = "#0A6A42","San Diego" = "#100391",
                    "Anacortes" = "#365577", "Santa Barbara" = "#83BDFF", "Malibu" = "#9227E4",
                    "Helsinki" = "#E2470A", "Lincoln" = "#858181", "Cream City" = "#90A78A",
                    "Beaverton" = "#5FBE73", "Bikini Bottom" = "#EFA7EE", "Las Vegas" = "#BC2111")

```

First, let's read in some data

```{r}
fantrax_feb5_raw <- read.csv(here::here('data/fantrax-data/fantrax_02_12_24.csv'))
```

### Data Cleaning

This data needs a bit of tidying up.

```{r, warning=FALSE}
# DATA CLEANING --------------------
fantrax_feb5 <- fantrax_feb5_raw %>% 
  janitor::clean_names() 

teams <- c("STARKS", "SERP", "SDP", "Orcas", "maxpat01", "Jmarr237", "HBC", "GBRAYERS", "CCC", "BIGFOOTS", "BBB", "$C/$")

new_team_names <- c(STARKS = "Winterfell", SERP = "Slytherin", SDP = "San Diego",
                    Orcas = "Anacortes", maxpat01 = "Santa Barbara", Jmarr237 = "Malibu",
                    HBC = "Helsinki", GBRAYERS = "Lincoln", CCC = "Cream City",
                    BIGFOOTS = "Beaverton", BBB = "Bikini Bottom", "$C/$" = "Las Vegas")

fantrax_feb5 <- fantrax_feb5 %>% 
  rename(fantasy_team = status) %>% 
  filter(fantasy_team %in% teams) %>% 
  mutate(
    adp = as.numeric(adp),
    x_d = as.numeric(gsub("%", "", x_d)) / 100, 
    ros = as.numeric(gsub("%", "", ros)) / 100,
    fantasy_team = case_when(
      fantasy_team %in% names(new_team_names) ~ new_team_names[fantasy_team],
      TRUE ~ fantasy_team  # This keeps the original name if not specified in new_team_names
    )
  )

```

### FP vs Age

```{r}
sorry_bron <- fantrax_feb5 %>% 
  filter(player != "LeBron James")

# Plotting fp_g vs age
ggplot(sorry_bron, aes(x = age, y = fp_g)) +
  geom_point(aes(color = fantasy_team), alpha = 0.7) +  # Color points by fantasy_team
  geom_smooth(method = "lm", formula = y ~ poly(x,4), se = FALSE, color = "black", linetype = "dashed") +  # Add a linear regression line
  theme_minimal() +
  labs(title = "Fantasy Points per Game vs. Age",
       x = "Age",
       y = "Fantasy Points per Game (fp_g)") +
  scale_color_brewer(palette = "Set1") 

```

### Team Comparisons

```{r}

# Subset and normalize data
data_to_cluster <- fantrax_feb5 %>%
  select(fantasy_team, fp_g, age) %>%
  group_by(fantasy_team) %>%
  summarise_all(mean, na.rm = TRUE) %>% # Average metrics for simplicity, adjust as needed
  ungroup()

# Normalize data
normalized_data <- scale(data_to_cluster[,-1]) # Excludes the first column (fantasy_team)

# Hierarchical clustering
dissimilarity <- dist(normalized_data) # Euclidean distance by default
hc <- hclust(dissimilarity, method = "ward.D2")

# Plot dendrogram to help decide on number of clusters
plot(hc, labels = data_to_cluster$fantasy_team, hang = -1)

# Cut tree to form clusters, adjust 'k' based on dendrogram
clusters <- cutree(hc, k = 5) # Example with 5 clusters

# Add cluster assignment back to data
data_to_cluster$cluster <- clusters

# Analyzing cluster characteristics
cluster_summary <- data_to_cluster %>%
  group_by(cluster) %>%
  summarise(
    avg_fp_g = mean(fp_g),
    avg_age = mean(age)
  )

# View cluster summary
print(cluster_summary)

```

```{r}

# Step 1: Aggregate fp_g and age by Fantasy Team
team_avgs <- fantrax_feb5 %>%
  group_by(fantasy_team) %>%
  summarise(avg_fp_g = mean(fp_g, na.rm = TRUE),
            avg_age = mean(age, na.rm = TRUE))

# Step 2: Scale the Aggregated Data
scaled_data <- scale(team_avgs[, -1]) # Excludes the first column (fantasy_team)

# Step 3: Compute the Distance Matrix
d <- dist(scaled_data)

# Convert the distance object to a matrix and label it with fantasy team names
distance_matrix <- as.matrix(d)
rownames(distance_matrix) <- team_avgs$fantasy_team
colnames(distance_matrix) <- team_avgs$fantasy_team

# Step 4: Label the Distance Matrix with Team Names
# You can view a part of the matrix for a quick check
print(distance_matrix[1:5, 1:5])

melted_distance_matrix <- melt(distance_matrix) %>% 
  filter(value > 0)

ggplot(melted_distance_matrix, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "forestgreen", mid = "yellow", high ="red", midpoint = 2) +
  theme_minimal() +
  labs(x = "Fantasy Team", y = "Fantasy Team", fill = "Distance") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(angle = 45, vjust = 1))

```

## 

## DATA VIZ

### Ridge Plot

```{r}
# Calculate average age of the top 20 fp_g scoring players for each team
team_avg_age_top20 <- fantrax_feb5 %>%
  arrange(desc(fp_g)) %>%
  group_by(fantasy_team) %>%
  slice_max(order_by = fp_g, n = 20) %>%  # Get top 20 fp_g scoring players for each team
  summarise(average_age = mean(age, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(average_age) %>%
  mutate(fantasy_team = factor(fantasy_team, levels = fantasy_team))

# Calculate the average fp_g for players under 25 for each fantasy team
team_avg_fp_g_under_25 <- fantrax_feb5 %>%
  filter(age < 25) %>%  # Only consider players under 25
  group_by(fantasy_team) %>%
  summarize(average_fp_g_under_25 = mean(fp_g, na.rm = TRUE)) %>%
  ungroup()

fantrax_feb5 <- fantrax_feb5 %>%
  group_by(age) %>%
  mutate(
    mean_fp_g_age = mean(fp_g, na.rm = TRUE),
    sd_fp_g_age = sd(fp_g, na.rm = TRUE),
    z_score_fp_g = (fp_g - mean_fp_g_age) / sd_fp_g_age
  ) %>%
  ungroup()  # Make sure to ungroup to avoid issues in future operations

# Join this back to the main dataset
fantrax_feb5_ordered <- fantrax_feb5 %>%
  left_join(team_avg_age_top20, by = "fantasy_team") %>%
  left_join(team_avg_fp_g_under_25, by = "fantasy_team") %>%
  mutate(fantasy_team_ordered = factor(fantasy_team, levels = team_avg_age_top20$fantasy_team))

# Plot ridges
ridge <- ggplot(fantrax_feb5_ordered, aes(x = z_score_fp_g, y = fantasy_team_ordered, fill = average_fp_g_under_25)) +
  geom_density_ridges(scale = 1.32, rel_min_height = 0.01) +  # Adjusted scale for shorter ridges
  scale_fill_gradient(low = "white", high = "darkorange", name = "Avg FP/G (< 25 y/o)") +
  labs(title = "Fantasy Team Relative Age Performance",
       x = "Z-Score",
       y = "Fantasy Team",
       subtitle = "Age-Adjusted FP/G Z-Scores filled with players averaged under 25") +
  theme_ridges() +
  theme(legend.position = "right",
        axis.text.x = element_text(size = 12, hjust = 0.5), 
        axis.text.y = element_text(size = 15, margin = margin(r = 8)),
        axis.title.y = element_blank()) +
  guides(fill = guide_colorbar(title.position = "top", title.vjust = 0.5, title.theme = element_text(size = 14), keywidth = 2.5, keyheight = 2.5))

# Update axes 
ridge_updated <- ridge + 
  theme(
    axis.ticks.y = element_blank(),  # Remove Y-axis ticks
    panel.grid.major.y = element_blank(),  # Removes major horizontal grid lines
    panel.grid.minor.y = element_blank(),  # Removes minor horizontal grid lines
  )

# Update the font of the ridge plot to Comic Sans MS
ridge_updated <- ridge_updated +
  theme(text = element_text(family = "Comic Sans MS"))

# Accessing background picture 
court_url <- "https://www.shutterstock.com/image-vector/basketball-court-floor-line-on-600nw-1007160199.jpg"
download.file(court_url, destfile = "court_image.jpg")
court <- jpeg::readJPEG("court_image.jpg")

# Display ridge plot with basketball court background
ggimage::ggbackground(ridge_updated, court_url)
```

### Radar Plot

```{r}
# Add age group categories
fantrax_feb5 <- fantrax_feb5 %>%
  mutate(age_group = case_when(
    age < 25 ~ "Under 25",
    age >= 25 & age < 30 ~ "25-29",
    age >= 30 ~ "Over 30"
  ))

# Ensure all teams have all age groups
complete_teams_age_groups <- expand.grid(fantasy_team = unique(fantrax_feb5$fantasy_team),
                                         age_group = c("Under 25", "25-29", "30+"))

team_age_group_metrics <- left_join(complete_teams_age_groups, team_age_group_metrics, 
                                    by = c("fantasy_team", "age_group")) %>%
  replace_na(list(avg_fp_g = 0, player_count = 0))

# Pivot wider for easier normalization and plotting
team_metrics_wide <- team_age_group_metrics %>%
  pivot_wider(names_from = age_group, values_from = c(avg_fp_g, player_count), 
              names_sep = "_") %>%
  replace_na(list(avg_fp_g_Under_25 = 0, avg_fp_g_25_29 = 0, avg_fp_g_30 = 0,
                  player_count_Under_25 = 0, player_count_25_29 = 0, player_count_30 = 0))

normalize <- function(x) {
  range_x <- range(x, na.rm = TRUE)
  if(range_x[1] == range_x[2]) return(rep(0.5, length(x)))  # Handle constant columns
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}

# Apply normalization across the relevant columns
normalized_columns <- grep("avg_fp_g|player_count", names(team_metrics_wide), value = TRUE)
team_metrics_wide[normalized_columns] <- lapply(team_metrics_wide[normalized_columns], normalize)

# Check if any column didn't normalize properly (e.g., due to NA values)
if(any(sapply(team_metrics_wide[normalized_columns], function(x) any(is.na(x))))) {
  stop("NA values detected in normalized metrics. Check for constant columns or other issues.")
}

create_and_save_radar_plot <- function(team_data, team_name) {
  radar_data <- rbind(rep(0, ncol(team_data)),  # Adding min values for radar plot
                      team_data,                # Team's normalized data
                      rep(1, ncol(team_data)))  # Adding max values for radar plot
  radar_chart <- radarchart(radar_data, axistype = 1,
                            pcol = 1, pfcol = 2, plwd = 2, plty = 1,
                            title = paste("Radar Plot for", team_name))
  
  # Assuming you want to save the plot, specify the directory and filename
  file_name <- paste0("radar_plot_", gsub("[[:space:]]+", "_", tolower(team_name)), ".png")
  png(file_name)
  print(radar_chart)  # Print the plot to the device
  dev.off()  # Close the device
}

# Assuming team_metrics_wide is already prepared and unique_teams is defined
unique_teams <- unique(fantrax_feb5$fantasy_team)

create_and_save_radar_plot <- function(team_data_df, team_name) {
  # Check if the dataframe is empty or null
  if(is.null(team_data_df) || nrow(team_data_df) == 0) {
    message("No data for team: ", team_name)
    return(NULL)
  }
  
  # Adding min and max rows for radar plot variables
  min_row <- rep(0, ncol(team_data_df))
  max_row <- rep(1, ncol(team_data_df))
  radar_df <- rbind(min_row, team_data_df, max_row)
  
  # Creating radar plot
  png(filename = paste0("radar_plot_", gsub("\\s+", "_", tolower(team_name)), ".png"), width = 800, height = 600)
  radarchart(radar_df, axistype = 1, pcol = rainbow(5), pfcol = rainbow(5, alpha = 0.5), plwd = 2, plty = 1)
  dev.off()
}

# Iterate through each team to create and save radar plots
for(team in unique_teams) {
  team_data <- team_metrics_wide %>%
    filter(fantasy_team == team) %>%
    select(matches("avg_fp_g|player_count")) %>%
    summarise(across(everything(), list(~ .[1]))) %>%
    pivot_longer(everything(), names_to = "Metric", values_to = "Value") %>%
    mutate(Metric = factor(Metric, levels = unique(.$Metric))) %>%
    pivot_wider(names_from = Metric, values_from = Value) %>%
    as.data.frame()  # Ensure the result is a dataframe
  
  # Calling the function to create and save the radar plot for the team
  if(nrow(team_data) > 0) {  # Check if there is data to plot
    create_and_save_radar_plot(team_data, team)
  } else {
    message("Skipping team with no data: ", team)
  }
}

```

### Sunburst Plot

```{r}
# Aggregate total fantasy points by age group for each team
total_fpts_by_age_team <- fantrax_feb5 %>%
  group_by(fantasy_team, age_group) %>%
  summarise(total_f_pts = sum(f_pts, na.rm = TRUE), .groups = 'drop')

# Prepare the sunburst data with appropriate parent-child relationships
sunburst_data <- total_fpts_by_age_team %>%
  mutate(id = paste(fantasy_team, age_group, sep = "_"),
         parent = fantasy_team,
         label = age_group,
         value = total_f_pts)

# Add root node
root_entry <- data.frame(
  id = "Fantasy Teams",
  parent = "",
  label = "Fantasy Teams",
  value = NA
)

# Combine root node and sunburst data
sunburst_data <- bind_rows(root_entry, sunburst_data)

# Replace NA values with 0 for plotting
sunburst_data$value[is.na(sunburst_data$value)] <- 0

# Generate the sunburst plot
fig <- plot_ly(sunburst_data, ids = ~id, labels = ~label, parents = ~parent, values = ~value, type = 'sunburst',
               branchvalues = 'total',
               marker = list(colors = ~value, colorscale = 'Blues'),
               textinfo = 'label+percent parent')

fig <- fig %>% layout(margin = list(l = 0, r = 0, b = 0, t = 0))

fig
```

```{r}
# Filter for the top 4 teams only
top_teams <- fantrax_feb5 %>% 
  filter(fantasy_team %in% c("Bikini Bottom", "Cream City", "Winterfell", "Malibu"))

# Create age groups
top_teams <- top_teams %>%
  mutate(age_group = case_when(
    age < 25 ~ "Under 25",
    age >= 25 & age <= 29 ~ "25-29",
    age > 29 ~ "Over 30"
  ))

# Calculate the number of players per age group for dot size
top_teams$age_group_count <- ave(top_teams$age_group, top_teams$age_group, FUN=length)

# Plotting with age groups
ggplot(top_teams, aes(x=age_group, y=f_pts, color=fantasy_team, size=age_group_count)) +
  geom_point(alpha=0.7) +
  scale_size_binned(range = c(1, 10), guide = 'none') + # Adjust dot size range as needed
  theme_minimal() +
  labs(title="Age Group vs Fantasy Points for Top 4 Teams", x="Age Group", y="Fantasy Points") +
  theme(legend.position="right")
```
